#!/bin/bash

# ====================================
# SCRIPT DE TEST DU SYST√àME DE VALIDATION
# Application Gestion des Salaires
# ====================================

echo "üß™ Tests du syst√®me de validation - Gestion des Salaires"
echo "========================================================"

# Configuration
API_URL="http://localhost:3000/api"
AUTH_TOKEN=""

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher les r√©sultats
print_result() {
    local test_name="$1"
    local expected_status="$2"
    local actual_status="$3"
    local response="$4"
    
    if [ "$actual_status" -eq "$expected_status" ]; then
        echo -e "${GREEN}‚úÖ PASS${NC} - $test_name"
    else
        echo -e "${RED}‚ùå FAIL${NC} - $test_name"
        echo -e "   Attendu: $expected_status, Re√ßu: $actual_status"
        echo -e "   R√©ponse: $response"
    fi
}

# Fonction pour tester une requ√™te
test_request() {
    local method="$1"
    local endpoint="$2"
    local data="$3"
    local expected_status="$4"
    local test_name="$5"
    
    echo -e "\n${BLUE}üß™ Test:${NC} $test_name"
    
    if [ "$method" = "GET" ]; then
        response=$(curl -s -w "\n%{http_code}" -X GET "$API_URL$endpoint" \
            -H "Content-Type: application/json")
    else
        response=$(curl -s -w "\n%{http_code}" -X "$method" "$API_URL$endpoint" \
            -H "Content-Type: application/json" \
            -d "$data")
    fi
    
    # Extraire le code de statut (derni√®re ligne)
    status_code=$(echo "$response" | tail -n1)
    # Extraire le body (tout sauf la derni√®re ligne)
    response_body=$(echo "$response" | sed '$d')
    
    print_result "$test_name" "$expected_status" "$status_code" "$response_body"
    
    # Afficher les erreurs de validation si pr√©sentes
    if [ "$status_code" -eq 400 ]; then
        echo -e "${YELLOW}üìã Erreurs de validation:${NC}"
        echo "$response_body" | jq -r '.errors // empty | to_entries[] | "   - \(.key): \(.value)"' 2>/dev/null || echo "   $response_body"
    fi
}

echo -e "\n${YELLOW}üîê Note: Ces tests n√©cessitent une authentification${NC}"
echo "Pour les tests complets, connectez-vous d'abord avec un super admin."

echo -e "\n${BLUE}===========================================${NC}"
echo -e "${BLUE}üè¢ TESTS DE VALIDATION DES ENTREPRISES${NC}"
echo -e "${BLUE}===========================================${NC}"

# Test 1: Cr√©ation d'entreprise - donn√©es valides
test_request "POST" "/entreprises" '{
    "nom": "Entreprise Test",
    "adresse": "123 Rue de la Validation",
    "telephone": "+221701234567",
    "email": "test@entreprise.com",
    "devise": "XOF",
    "periodePaie": "MENSUELLE"
}' 201 "Cr√©ation entreprise - donn√©es valides"

# Test 2: Cr√©ation d'entreprise - nom trop court
test_request "POST" "/entreprises" '{
    "nom": "A",
    "adresse": "123 Rue de la Validation",
    "telephone": "+221701234567",
    "email": "test@entreprise.com"
}' 400 "Cr√©ation entreprise - nom trop court"

# Test 3: Cr√©ation d'entreprise - email invalide
test_request "POST" "/entreprises" '{
    "nom": "Entreprise Test",
    "adresse": "123 Rue de la Validation",
    "telephone": "+221701234567",
    "email": "email-invalide"
}' 400 "Cr√©ation entreprise - email invalide"

# Test 4: Cr√©ation d'entreprise - t√©l√©phone invalide
test_request "POST" "/entreprises" '{
    "nom": "Entreprise Test",
    "adresse": "123 Rue de la Validation",
    "telephone": "123",
    "email": "test@entreprise.com"
}' 400 "Cr√©ation entreprise - t√©l√©phone invalide"

# Test 5: Cr√©ation d'entreprise - devise invalide
test_request "POST" "/entreprises" '{
    "nom": "Entreprise Test",
    "adresse": "123 Rue de la Validation",
    "telephone": "+221701234567",
    "email": "test@entreprise.com",
    "devise": "INVALID"
}' 400 "Cr√©ation entreprise - devise invalide"

echo -e "\n${BLUE}========================================${NC}"
echo -e "${BLUE}üë• TESTS DE VALIDATION DES EMPLOY√âS${NC}"
echo -e "${BLUE}========================================${NC}"

# Test 6: Cr√©ation employ√© - donn√©es valides (FIXE)
test_request "POST" "/employes" '{
    "prenom": "Jean",
    "nom": "Dupont",
    "email": "jean.dupont@test.com",
    "telephone": "+221701234568",
    "poste": "D√©veloppeur",
    "typeContrat": "FIXE",
    "salaireBase": 750000,
    "dateEmbauche": "2024-01-01T00:00:00.000Z",
    "entrepriseId": 1
}' 201 "Cr√©ation employ√© FIXE - donn√©es valides"

# Test 7: Cr√©ation employ√© - donn√©es valides (JOURNALIER)
test_request "POST" "/employes" '{
    "prenom": "Marie",
    "nom": "Martin",
    "email": "marie.martin@test.com",
    "telephone": "+221701234569",
    "poste": "Consultante",
    "typeContrat": "JOURNALIER",
    "tauxJournalier": 25000,
    "dateEmbauche": "2024-01-01T00:00:00.000Z",
    "entrepriseId": 1
}' 201 "Cr√©ation employ√© JOURNALIER - donn√©es valides"

# Test 8: Cr√©ation employ√© - pr√©nom invalide
test_request "POST" "/employes" '{
    "prenom": "J3an",
    "nom": "Dupont",
    "poste": "D√©veloppeur",
    "typeContrat": "FIXE",
    "salaireBase": 750000,
    "dateEmbauche": "2024-01-01T00:00:00.000Z",
    "entrepriseId": 1
}' 400 "Cr√©ation employ√© - pr√©nom avec chiffres"

# Test 9: Cr√©ation employ√© - email invalide
test_request "POST" "/employes" '{
    "prenom": "Jean",
    "nom": "Dupont",
    "email": "email-invalide",
    "poste": "D√©veloppeur",
    "typeContrat": "FIXE",
    "salaireBase": 750000,
    "dateEmbauche": "2024-01-01T00:00:00.000Z",
    "entrepriseId": 1
}' 400 "Cr√©ation employ√© - email invalide"

# Test 10: Cr√©ation employ√© - salaire n√©gatif
test_request "POST" "/employes" '{
    "prenom": "Jean",
    "nom": "Dupont",
    "poste": "D√©veloppeur",
    "typeContrat": "FIXE",
    "salaireBase": -1000,
    "dateEmbauche": "2024-01-01T00:00:00.000Z",
    "entrepriseId": 1
}' 400 "Cr√©ation employ√© - salaire n√©gatif"

# Test 11: Cr√©ation employ√© - date future
test_request "POST" "/employes" '{
    "prenom": "Jean",
    "nom": "Dupont",
    "poste": "D√©veloppeur",
    "typeContrat": "FIXE",
    "salaireBase": 750000,
    "dateEmbauche": "2030-01-01T00:00:00.000Z",
    "entrepriseId": 1
}' 400 "Cr√©ation employ√© - date embauche future"

echo -e "\n${BLUE}========================================${NC}"
echo -e "${BLUE}üí∞ TESTS DE VALIDATION DES PAIEMENTS${NC}"
echo -e "${BLUE}========================================${NC}"

# Test 12: Cr√©ation paiement - donn√©es valides
test_request "POST" "/paiements" '{
    "bulletinPaieId": 1,
    "montant": 750000,
    "methodePaiement": "VIREMENT_BANCAIRE",
    "reference": "PAY-2024-001",
    "traiteParId": 1
}' 201 "Cr√©ation paiement - donn√©es valides"

# Test 13: Cr√©ation paiement - montant n√©gatif
test_request "POST" "/paiements" '{
    "bulletinPaieId": 1,
    "montant": -1000,
    "methodePaiement": "ESPECES",
    "traiteParId": 1
}' 400 "Cr√©ation paiement - montant n√©gatif"

# Test 14: Cr√©ation paiement - m√©thode invalide
test_request "POST" "/paiements" '{
    "bulletinPaieId": 1,
    "montant": 750000,
    "methodePaiement": "BITCOIN",
    "traiteParId": 1
}' 400 "Cr√©ation paiement - m√©thode invalide"

echo -e "\n${BLUE}======================================${NC}"
echo -e "${BLUE}üîê TESTS DE VALIDATION AUTH${NC}"
echo -e "${BLUE}======================================${NC}"

# Test 15: Connexion - email invalide
test_request "POST" "/auth/connexion" '{
    "email": "email-invalide",
    "motDePasse": "password123"
}' 400 "Connexion - email invalide"

# Test 16: Connexion - mot de passe manquant
test_request "POST" "/auth/connexion" '{
    "email": "test@example.com"
}' 400 "Connexion - mot de passe manquant"

echo -e "\n${BLUE}======================================${NC}"
echo -e "${BLUE}üìä TESTS DE VALIDATION CYCLES DE PAIE${NC}"
echo -e "${BLUE}======================================${NC}"

# Test 17: Cr√©ation cycle - donn√©es valides
test_request "POST" "/cycles-paie" '{
    "titre": "Paie Janvier 2024",
    "periode": "2024-01",
    "dateDebut": "2024-01-01T00:00:00.000Z",
    "dateFin": "2024-01-31T23:59:59.000Z",
    "joursOuvrables": 22,
    "entrepriseId": 1
}' 201 "Cr√©ation cycle paie - donn√©es valides"

# Test 18: Cr√©ation cycle - p√©riode invalide
test_request "POST" "/cycles-paie" '{
    "titre": "Paie Janvier 2024",
    "periode": "2024/01",
    "dateDebut": "2024-01-01T00:00:00.000Z",
    "dateFin": "2024-01-31T23:59:59.000Z",
    "joursOuvrables": 22,
    "entrepriseId": 1
}' 400 "Cr√©ation cycle paie - format p√©riode invalide"

# Test 19: Cr√©ation cycle - dates incoh√©rentes
test_request "POST" "/cycles-paie" '{
    "titre": "Paie Janvier 2024",
    "periode": "2024-01",
    "dateDebut": "2024-01-31T00:00:00.000Z",
    "dateFin": "2024-01-01T23:59:59.000Z",
    "joursOuvrables": 22,
    "entrepriseId": 1
}' 400 "Cr√©ation cycle paie - date fin avant d√©but"

echo -e "\n${GREEN}‚úÖ Tests termin√©s!${NC}"
echo -e "\n${YELLOW}üìã R√©sum√©:${NC}"
echo "- Tests de validation des champs obligatoires"
echo "- Tests de format des donn√©es (email, t√©l√©phone, dates)"
echo "- Tests de coh√©rence logique (dates, montants)"
echo "- Tests des √©num√©rations (devises, types, statuts)"
echo "- Tests de contraintes m√©tier (salaires, p√©riodes)"

echo -e "\n${BLUE}üîß Pour des tests complets:${NC}"
echo "1. D√©marrez le serveur backend: npm run dev"
echo "2. Cr√©ez un super admin: node scripts/createSuperAdmin.cjs"
echo "3. Obtenez un token d'authentification"
echo "4. Relancez ce script avec l'authentification"

echo -e "\n${YELLOW}üí° Note:${NC} Certains tests peuvent √©chouer si les donn√©es existent d√©j√†"
echo "ou si l'authentification n'est pas configur√©e."