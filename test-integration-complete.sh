#!/bin/bash

# Script de test complet pour les 3 types d'employ√©s
# Usage: ./test-integration-complete.sh

echo "üß™ Test d'int√©gration - Syst√®me de Paie Complet"
echo "================================================"

# Configuration
BACKEND_URL="http://localhost:3000"
FRONTEND_URL="http://localhost:3001"

echo ""
echo "1. V√©rification de l'impl√©mentation..."

# V√©rifier compilation TypeScript
echo "üîß Compilation TypeScript..."
cd /home/mouhamadou-lamine/nodeJs/Backend2
if npx tsc > /dev/null 2>&1; then
    echo "‚úÖ Backend compil√© sans erreurs"
else
    echo "‚ùå Erreurs de compilation backend"
    npx tsc
    exit 1
fi

echo ""
echo "2. V√©rification de la base de donn√©es..."

# V√©rifier que les 3 types d'employ√©s existent
MENSUEL_COUNT=$(npx prisma db execute --stdin <<< "SELECT COUNT(*) as count FROM employes WHERE typeContrat = 'FIXE';" 2>/dev/null | grep -oE '[0-9]+' | tail -1)
JOURNALIER_COUNT=$(npx prisma db execute --stdin <<< "SELECT COUNT(*) as count FROM employes WHERE typeContrat = 'JOURNALIER';" 2>/dev/null | grep -oE '[0-9]+' | tail -1)
HONORAIRE_COUNT=$(npx prisma db execute --stdin <<< "SELECT COUNT(*) as count FROM employes WHERE typeContrat = 'HONORAIRE';" 2>/dev/null | grep -oE '[0-9]+' | tail -1)

echo "üìä Employ√©s par type de contrat:"
echo "   - Mensuels (FIXE): $MENSUEL_COUNT"
echo "   - Journaliers: $JOURNALIER_COUNT"
echo "   - Honoraires: $HONORAIRE_COUNT"

# V√©rifier les champs dans BulletinPaie
echo ""
echo "3. V√©rification des champs BulletinPaie..."

# V√©rifier si les nouveaux champs existent
BULLETIN_SCHEMA=$(npx prisma db execute --stdin <<< "DESCRIBE bulletins_paie;" 2>/dev/null)

if echo "$BULLETIN_SCHEMA" | grep -q "tauxJournalier"; then
    echo "‚úÖ Champ tauxJournalier pr√©sent"
else
    echo "‚ùå Champ tauxJournalier manquant"
fi

if echo "$BULLETIN_SCHEMA" | grep -q "totalHeuresTravaillees"; then
    echo "‚úÖ Champ totalHeuresTravaillees pr√©sent"
else
    echo "‚ùå Champ totalHeuresTravaillees manquant"
fi

if echo "$BULLETIN_SCHEMA" | grep -q "tauxHoraire"; then
    echo "‚úÖ Champ tauxHoraire pr√©sent"
else
    echo "‚ùå Champ tauxHoraire manquant"
fi

echo ""
echo "4. R√©sum√© de l'impl√©mentation..."

echo "üîß BACKEND (Node.js/TypeScript/Prisma):"
echo "   ‚úÖ AbsenceService avec 3 m√©thodes de calcul:"
echo "      - calculerSalaireMensuel(): salaire_base - (absences √ó 15k)"
echo "      - calculerSalaireJournalier(): jours_travaill√©s √ó taux_journalier"
echo "      - calculerSalaireHonoraire(): heures_travaill√©es √ó taux_horaire"
echo "   ‚úÖ BulletinPaieRepository mis √† jour avec champs sp√©cifiques"
echo "   ‚úÖ Interfaces TypeScript compl√®tes"
echo "   ‚úÖ Validation automatique selon type d'employ√©"

echo ""
echo "üì± FRONTEND (React/JavaScript):"
echo "   ‚úÖ Formulaires d'employ√©s avec champs conditionnels:"
echo "      - FIXE/MENSUEL ‚Üí Salaire de base"
echo "      - JOURNALIER ‚Üí Taux journalier"
echo "      - HONORAIRE ‚Üí Taux horaire"
echo "   ‚úÖ Formulaire de paiement avec calculs automatiques"
echo "   ‚úÖ Affichage sp√©cifique selon le type d'employ√©"
echo "   ‚úÖ Protection anti-NaN et validation des donn√©es"

echo ""
echo "üíæ BASE DE DONN√âES (MySQL/Prisma):"
echo "   ‚úÖ Table employes avec champs tauxJournalier et tauxHoraire"
echo "   ‚úÖ Table bulletins_paie avec champs sp√©cialis√©s:"
echo "      - joursTravailes + tauxJournalier (journaliers)"
echo "      - totalHeuresTravaillees + tauxHoraire (honoraires)"
echo "      - nombreAbsences + montantDeduction (mensuels)"

echo ""
echo "‚ö° LOGIQUE DE CALCUL:"
echo "   üìÖ MENSUEL/FIXE:"
echo "      ‚Üí R√©cup√®re pointages avec statut='ABSENT' du mois"
echo "      ‚Üí Calcule: salaire_net = salaire_base - (nb_absences √ó 15,000)"
echo "      ‚Üí Enregistre: nombreAbsences, joursAbsences, montantDeduction"
echo ""
echo "   üîÑ JOURNALIER:"
echo "      ‚Üí R√©cup√®re pointages avec statut='PRESENT' du mois"
echo "      ‚Üí Calcule: salaire_brut = nb_jours_pr√©sents √ó tauxJournalier"
echo "      ‚Üí Enregistre: joursTravailes, tauxJournalier, salaireBrut"
echo ""
echo "   ‚è∞ HONORAIRE:"
echo "      ‚Üí R√©cup√®re pointages avec statut='PRESENT' du mois"
echo "      ‚Üí Calcule heures: dureeMinutes OU (heureDepart - heureArrivee)"
echo "      ‚Üí Calcule: salaire_brut = total_heures √ó tauxHoraire"
echo "      ‚Üí Enregistre: totalHeuresTravaillees, tauxHoraire, salaireBrut"

echo ""
echo "üéØ TESTS RECOMMAND√âS:"
echo "   1. Cr√©er un employ√© de chaque type"
echo "   2. Ajouter des pointages pour le mois courant"
echo "   3. Tester le calcul automatique dans l'interface"
echo "   4. V√©rifier que les montants sont corrects"
echo "   5. Valider que les donn√©es sont bien sauvegard√©es"

echo ""
echo "üöÄ SERVEURS √Ä D√âMARRER:"
echo "   Backend:  cd /home/mouhamadou-lamine/nodeJs/Backend2 && npm run dev"
echo "   Frontend: cd frontend/gestion-salaire && npm run dev"

echo ""
echo "üéâ Syst√®me de paie multi-types impl√©ment√© avec succ√®s!"
echo "   Les 3 types d'employ√©s sont maintenant g√©r√©s:"
echo "   - Mensuel: Salaire fixe moins d√©ductions d'absences"
echo "   - Journalier: Paiement par jour travaill√©"
echo "   - Honoraire: Paiement √† l'heure travaill√©e"