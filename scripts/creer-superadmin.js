import { PrismaClient } from '@prisma/client';
import bcrypt from 'bcryptjs';

const prisma = new PrismaClient();

async function creerSuperAdmin() {
  try {
    console.log('üîß Cr√©ation d\'un SUPER_ADMIN...\n');

    // V√©rifier s'il existe d√©j√† un SUPER_ADMIN
    const existingSuperAdmin = await prisma.utilisateur.findFirst({
      where: { role: 'SUPER_ADMIN' }
    });

    if (existingSuperAdmin) {
      console.log('‚ö†Ô∏è  Un SUPER_ADMIN existe d√©j√†:', existingSuperAdmin.email);
      return;
    }

    // Cr√©er le SUPER_ADMIN (sans entreprise)
    const superAdmin = await prisma.utilisateur.create({
      data: {
        email: 'superadmin@paymanager.com',
        motDePasse: bcrypt.hashSync('superadmin123', 10),
        prenom: 'Super',
        nom: 'Administrator',
        role: 'SUPER_ADMIN',
        // Pas d'entrepriseId pour un SUPER_ADMIN
      }
    });

    console.log('‚úÖ SUPER_ADMIN cr√©√© avec succ√®s!');
    console.log('\nüîë Informations de connexion:');
    console.log('   Email: superadmin@paymanager.com');
    console.log('   Mot de passe: superadmin123');
    console.log('   R√¥le: SUPER_ADMIN');
    console.log('\nüìç Apr√®s connexion, sera redirig√© vers: /super-admin');

  } catch (error) {
    console.error('‚ùå Erreur:', error);
  } finally {
    await prisma.$disconnect();
  }
}

creerSuperAdmin();