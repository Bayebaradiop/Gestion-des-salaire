#!/usr/bin/env node

/**
 * Script de migration pour recalculer automatiquement les dur√©es manquantes
 * Usage: node scripts/recalculer-durees-pointages.cjs [entrepriseId]
 */

const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

/**
 * Calcule la dur√©e en minutes entre l'heure d'arriv√©e et l'heure de d√©part
 */
function calculerDureeMinutes(heureArrivee, heureDepart) {
  if (!heureArrivee || !heureDepart) {
    return null;
  }

  const dateArrivee = new Date(heureArrivee);
  const dateDepart = new Date(heureDepart);

  // Validation : l'heure de d√©part doit √™tre apr√®s l'heure d'arriv√©e
  if (dateDepart <= dateArrivee) {
    console.warn('‚ö†Ô∏è Heure de d√©part ant√©rieure ou √©gale √† l\'heure d\'arriv√©e', {
      heureArrivee: dateArrivee.toISOString(),
      heureDepart: dateDepart.toISOString()
    });
    return null;
  }

  // Calcul de la diff√©rence en minutes
  const diffEnMs = dateDepart.getTime() - dateArrivee.getTime();
  const diffEnMinutes = Math.floor(diffEnMs / (1000 * 60));

  // S√©curit√© : pas de dur√©es n√©gatives ou excessives (plus de 24h = 1440 minutes)
  if (diffEnMinutes < 0 || diffEnMinutes > 1440) {
    console.warn('‚ö†Ô∏è Dur√©e calcul√©e invalide', {
      dureeMinutes: diffEnMinutes,
      heureArrivee: dateArrivee.toISOString(),
      heureDepart: dateDepart.toISOString()
    });
    return null;
  }

  return diffEnMinutes;
}

async function recalculerDurees(entrepriseId = null) {
  try {
    console.log('üîÑ D√©marrage du recalcul des dur√©es de pointage...');

    // Construire le filtre de recherche
    const where = {
      AND: [
        { dureeMinutes: null },
        { heureArrivee: { not: null } },
        { heureDepart: { not: null } },
      ]
    };

    if (entrepriseId) {
      where.entrepriseId = parseInt(entrepriseId);
      console.log(`üìç Recalcul pour l'entreprise ID: ${entrepriseId}`);
    } else {
      console.log('üìç Recalcul pour toutes les entreprises');
    }

    // Trouver tous les pointages sans dur√©e mais avec heures d'arriv√©e et d√©part
    const pointagesSansDuree = await prisma.pointage.findMany({
      where,
      include: {
        employe: {
          select: {
            id: true,
            prenom: true,
            nom: true,
            codeEmploye: true
          }
        },
        entreprise: {
          select: {
            id: true,
            nom: true
          }
        }
      }
    });

    console.log(`üìä ${pointagesSansDuree.length} pointages √† recalculer`);

    if (pointagesSansDuree.length === 0) {
      console.log('‚úÖ Aucun pointage √† recalculer');
      return 0;
    }

    let nombreMisAJour = 0;
    let nombreErreurs = 0;

    // Traiter chaque pointage
    for (const pointage of pointagesSansDuree) {
      try {
        const dureeCalculee = calculerDureeMinutes(
          pointage.heureArrivee,
          pointage.heureDepart
        );

        if (dureeCalculee !== null) {
          await prisma.pointage.update({
            where: { id: pointage.id },
            data: {
              dureeMinutes: dureeCalculee,
              misAJourLe: new Date()
            }
          });

          console.log(`‚úÖ Pointage ${pointage.id} mis √† jour - ${pointage.employe.prenom} ${pointage.employe.nom} (${pointage.entreprise.nom}) - ${dureeCalculee} minutes`);
          nombreMisAJour++;
        } else {
          console.log(`‚ö†Ô∏è Pointage ${pointage.id} ignor√© - ${pointage.employe.prenom} ${pointage.employe.nom} (${pointage.entreprise.nom}) - calcul impossible`);
          nombreErreurs++;
        }
      } catch (error) {
        console.error(`‚ùå Erreur lors de la mise √† jour du pointage ${pointage.id}:`, error);
        nombreErreurs++;
      }
    }

    console.log('\nüìà R√©sum√© du recalcul:');
    console.log(`‚úÖ ${nombreMisAJour} pointages mis √† jour avec succ√®s`);
    console.log(`‚ö†Ô∏è ${nombreErreurs} pointages avec erreurs`);
    console.log(`üìä ${pointagesSansDuree.length} pointages trait√©s au total`);

    return nombreMisAJour;
  } catch (error) {
    console.error('‚ùå Erreur lors du recalcul en masse:', error);
    throw error;
  }
}

async function verifierInconsistances(entrepriseId = null) {
  console.log('\nüîç V√©rification des inconsistances...');

  try {
    // Construire le filtre de recherche
    const where = {
      AND: [
        { heureArrivee: { not: null } },
        { heureDepart: { not: null } },
        { dureeMinutes: { not: null } },
      ]
    };

    if (entrepriseId) {
      where.entrepriseId = parseInt(entrepriseId);
    }

    const pointagesAvecDuree = await prisma.pointage.findMany({
      where,
      include: {
        employe: {
          select: {
            id: true,
            prenom: true,
            nom: true,
            codeEmploye: true
          }
        }
      }
    });

    let inconsistances = 0;

    for (const pointage of pointagesAvecDuree) {
      const dureeCalculee = calculerDureeMinutes(
        pointage.heureArrivee,
        pointage.heureDepart
      );

      if (dureeCalculee !== null && dureeCalculee !== pointage.dureeMinutes) {
        console.log(`‚ö†Ô∏è Inconsistance d√©tect√©e - Pointage ${pointage.id} (${pointage.employe.prenom} ${pointage.employe.nom})`);
        console.log(`   Dur√©e stock√©e: ${pointage.dureeMinutes} minutes`);
        console.log(`   Dur√©e calcul√©e: ${dureeCalculee} minutes`);
        inconsistances++;
      }
    }

    if (inconsistances === 0) {
      console.log('‚úÖ Aucune inconsistance d√©tect√©e');
    } else {
      console.log(`‚ö†Ô∏è ${inconsistances} inconsistances d√©tect√©es`);
    }

    return inconsistances;
  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification:', error);
    throw error;
  }
}

async function main() {
  try {
    const entrepriseId = process.argv[2]; // Param√®tre optionnel

    // √âtape 1: Recalculer les dur√©es manquantes
    const nombreMisAJour = await recalculerDurees(entrepriseId);

    // √âtape 2: V√©rifier les inconsistances
    const inconsistances = await verifierInconsistances(entrepriseId);

    console.log('\nüéâ Migration termin√©e avec succ√®s!');
    console.log(`üìä R√©sum√© final:`);
    console.log(`   - ${nombreMisAJour} dur√©es recalcul√©es`);
    console.log(`   - ${inconsistances} inconsistances d√©tect√©es`);

    if (inconsistances > 0) {
      console.log('\nüí° Conseil: Ex√©cutez √† nouveau le script pour corriger les inconsistances d√©tect√©es');
    }

  } catch (error) {
    console.error('‚ùå Erreur fatale:', error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

// Ex√©cuter le script si appel√© directement
if (require.main === module) {
  main();
}