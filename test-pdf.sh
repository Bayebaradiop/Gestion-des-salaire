#!/bin/bash

# Script de test des fonctionnalit√©s PDF
# Test des endpoints PDF du backend de gestion de paie

echo "üß™ === TEST DES FONCTIONNALIT√âS PDF ===" 
echo "üìÖ Date: $(date)"
echo ""

# Variables de configuration
BASE_URL="http://localhost:3000/api"
TOKEN=""

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher les r√©sultats
print_result() {
    if [ $1 -eq 0 ]; then
        echo -e "${GREEN}‚úÖ $2${NC}"
    else
        echo -e "${RED}‚ùå $2${NC}"
    fi
}

# Fonction pour tester un endpoint
test_endpoint() {
    local method=$1
    local url=$2
    local description=$3
    local expected_code=${4:-200}
    
    echo -e "${BLUE}üîç Test: $description${NC}"
    
    if [ "$method" = "GET" ]; then
        response=$(curl -s -w "%{http_code}" -H "Authorization: Bearer $TOKEN" "$url" -o /dev/null)
    else
        response=$(curl -s -w "%{http_code}" -X "$method" -H "Content-Type: application/json" -H "Authorization: Bearer $TOKEN" "$url" -o /dev/null)
    fi
    
    if [ "$response" = "$expected_code" ]; then
        print_result 0 "$description - Code: $response"
    else
        print_result 1 "$description - Code attendu: $expected_code, re√ßu: $response"
    fi
    echo ""
}

echo "üîê √âTAPE 1: AUTHENTIFICATION"
echo "Tentative de connexion avec superadmin@testsa.com..."

# Test de connexion (nous savons que le mot de passe peut √™tre diff√©rent)
AUTH_RESPONSE=$(curl -s -X POST "$BASE_URL/auth/connexion" \
    -H "Content-Type: application/json" \
    -d '{"email": "superadmin@testsa.com", "motDePasse": "password123"}' 2>/dev/null)

echo "R√©ponse d'authentification re√ßue"

# Essayons d'autres mots de passe courants si le premier √©choue
if [[ "$AUTH_RESPONSE" == *"token"* ]]; then
    TOKEN=$(echo $AUTH_RESPONSE | grep -o '"token":"[^"]*' | cut -d'"' -f4)
    print_result 0 "Authentification r√©ussie avec password123"
else
    echo "Tentative avec d'autres mots de passe..."
    for pwd in "motdepasse123" "admin123" "superadmin123" "123456"; do
        AUTH_RESPONSE=$(curl -s -X POST "$BASE_URL/auth/connexion" \
            -H "Content-Type: application/json" \
            -d "{\"email\": \"superadmin@testsa.com\", \"motDePasse\": \"$pwd\"}" 2>/dev/null)
        
        if [[ "$AUTH_RESPONSE" == *"token"* ]]; then
            TOKEN=$(echo $AUTH_RESPONSE | grep -o '"token":"[^"]*' | cut -d'"' -f4)
            print_result 0 "Authentification r√©ussie avec $pwd"
            break
        fi
    done
fi

if [ -z "$TOKEN" ]; then
    print_result 1 "√âchec de l'authentification avec tous les mots de passe test√©s"
    echo "R√©ponse: $AUTH_RESPONSE"
    echo ""
    echo "‚ö†Ô∏è  Pour continuer les tests, vous devez :"
    echo "1. V√©rifier le mot de passe correct dans la base de donn√©es"
    echo "2. Ou cr√©er un utilisateur de test avec un mot de passe connu"
    echo "3. Ou modifier ce script avec les bonnes credentials"
    echo ""
    echo "üîç Utilisateurs disponibles dans la base :"
    sqlite3 prisma/dev.db "SELECT email, role FROM utilisateurs;"
    exit 1
fi

echo ""
echo "üìä √âTAPE 2: V√âRIFICATION DES DONN√âES DE TEST"

# V√©rification des donn√©es existantes
echo "üìã Donn√©es disponibles pour les tests :"
echo ""

echo "üë• Utilisateurs :"
sqlite3 prisma/dev.db "SELECT id, email, role FROM utilisateurs LIMIT 3;"
echo ""

echo "üè¢ Entreprises :"
sqlite3 prisma/dev.db "SELECT id, nom FROM entreprises LIMIT 3;"
echo ""

echo "üí∞ Paiements :"
sqlite3 prisma/dev.db "SELECT id, numeroRecu, montant FROM paiements LIMIT 3;"
echo ""

echo "üìÑ Bulletins de paie :"
sqlite3 prisma/dev.db "SELECT id, numeroBulletin, salaireBrut FROM bulletins_paie LIMIT 3;"
echo ""

echo "üìÖ Cycles de paie :"
sqlite3 prisma/dev.db "SELECT id, periode FROM cycles_paie LIMIT 3;"
echo ""

echo "üß™ √âTAPE 3: TESTS DES ENDPOINTS PDF"
echo ""

# Test 1: G√©n√©ration PDF d'un re√ßu de paiement
echo -e "${BLUE}üßæ Test 1: G√©n√©ration PDF d'un re√ßu de paiement${NC}"
PDF_RECU_RESPONSE=$(curl -s -w "%{http_code}" -H "Authorization: Bearer $TOKEN" \
    "$BASE_URL/paiements/1/pdf" --output test-recu.pdf 2>/dev/null)

if [ "$PDF_RECU_RESPONSE" = "200" ] && [ -f "test-recu.pdf" ] && [ -s "test-recu.pdf" ]; then
    print_result 0 "G√©n√©ration PDF re√ßu - Fichier cr√©√© ($(stat -c%s test-recu.pdf) bytes)"
    file test-recu.pdf | grep -q "PDF" && print_result 0 "Format PDF valide pour le re√ßu" || print_result 1 "Format PDF invalide pour le re√ßu"
else
    print_result 1 "G√©n√©ration PDF re√ßu - Code: $PDF_RECU_RESPONSE"
fi
echo ""

# Test 2: G√©n√©ration PDF d'un bulletin de paie
echo -e "${BLUE}üìã Test 2: G√©n√©ration PDF d'un bulletin de paie${NC}"
PDF_BULLETIN_RESPONSE=$(curl -s -w "%{http_code}" -H "Authorization: Bearer $TOKEN" \
    "$BASE_URL/bulletins/1/pdf" --output test-bulletin.pdf 2>/dev/null)

if [ "$PDF_BULLETIN_RESPONSE" = "200" ] && [ -f "test-bulletin.pdf" ] && [ -s "test-bulletin.pdf" ]; then
    print_result 0 "G√©n√©ration PDF bulletin - Fichier cr√©√© ($(stat -c%s test-bulletin.pdf) bytes)"
    file test-bulletin.pdf | grep -q "PDF" && print_result 0 "Format PDF valide pour le bulletin" || print_result 1 "Format PDF invalide pour le bulletin"
else
    print_result 1 "G√©n√©ration PDF bulletin - Code: $PDF_BULLETIN_RESPONSE"
fi
echo ""

# Test 3: G√©n√©ration PDF liste des paiements
echo -e "${BLUE}üìä Test 3: G√©n√©ration PDF liste des paiements${NC}"
PERIODE=$(sqlite3 prisma/dev.db "SELECT periode FROM cycles_paie LIMIT 1;")
ENTREPRISE_ID=$(sqlite3 prisma/dev.db "SELECT id FROM entreprises LIMIT 1;")

PDF_LISTE_RESPONSE=$(curl -s -w "%{http_code}" -H "Authorization: Bearer $TOKEN" \
    "$BASE_URL/entreprises/$ENTREPRISE_ID/paiements/$PERIODE/pdf" --output test-liste.pdf 2>/dev/null)

if [ "$PDF_LISTE_RESPONSE" = "200" ] && [ -f "test-liste.pdf" ] && [ -s "test-liste.pdf" ]; then
    print_result 0 "G√©n√©ration PDF liste - Fichier cr√©√© ($(stat -c%s test-liste.pdf) bytes)"
    file test-liste.pdf | grep -q "PDF" && print_result 0 "Format PDF valide pour la liste" || print_result 1 "Format PDF invalide pour la liste"
else
    print_result 1 "G√©n√©ration PDF liste - Code: $PDF_LISTE_RESPONSE"
fi
echo ""

echo "üß™ √âTAPE 4: TESTS DE S√âCURIT√â"
echo ""

# Test sans token
echo -e "${BLUE}üîí Test 4: Acc√®s sans authentification${NC}"
NO_AUTH_RESPONSE=$(curl -s -w "%{http_code}" "$BASE_URL/paiements/1/pdf" -o /dev/null 2>/dev/null)
if [ "$NO_AUTH_RESPONSE" = "401" ]; then
    print_result 0 "S√©curit√© - Acc√®s refus√© sans token (Code: $NO_AUTH_RESPONSE)"
else
    print_result 1 "S√©curit√© - Devrait refuser l'acc√®s sans token (Code: $NO_AUTH_RESPONSE)"
fi
echo ""

echo "üìã R√âSUM√â DES TESTS"
echo "===================="
echo ""

# Comptage des fichiers PDF g√©n√©r√©s
PDF_COUNT=0
[ -f "test-recu.pdf" ] && [ -s "test-recu.pdf" ] && ((PDF_COUNT++))
[ -f "test-bulletin.pdf" ] && [ -s "test-bulletin.pdf" ] && ((PDF_COUNT++))
[ -f "test-liste.pdf" ] && [ -s "test-liste.pdf" ] && ((PDF_COUNT++))

echo "üìÅ Fichiers PDF g√©n√©r√©s: $PDF_COUNT/3"
echo ""

if [ "$PDF_COUNT" -eq 3 ]; then
    echo -e "${GREEN}üéâ TOUS LES TESTS PDF R√âUSSIS !${NC}"
    echo ""
    echo "‚úÖ G√©n√©ration de re√ßus PDF op√©rationnelle"
    echo "‚úÖ G√©n√©ration de bulletins PDF op√©rationnelle"  
    echo "‚úÖ G√©n√©ration de listes PDF op√©rationnelle"
    echo "‚úÖ S√©curit√© impl√©ment√©e correctement"
    echo ""
    echo -e "${GREEN}üèÜ Les fonctionnalit√©s PDF compl√®tent le cahier des charges √† 100% !${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Certains tests ont √©chou√©${NC}"
    echo "V√©rifiez les logs du serveur pour plus de d√©tails"
fi

echo ""
echo "üìä Fichiers de test g√©n√©r√©s :"
ls -la test-*.pdf 2>/dev/null || echo "Aucun fichier PDF g√©n√©r√©"

echo ""
echo "üßπ Nettoyage des fichiers de test..."
rm -f test-*.pdf

echo ""
echo "‚ú® Tests termin√©s - $(date)"